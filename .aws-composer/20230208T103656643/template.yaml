AWSTemplateFormatVersion: 2010-09-09
Description: eventbridge-scheduler-demo
Transform: AWS::Serverless-2016-10-31
Resources:
  ScheduledEventLogger:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that logs the payload of messages sent to an associated SQS queue.
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Handler: src/handlers/scheduled-event-logger.scheduledEventLoggerHandler
      Events:
        CloudWatchEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 * * * ? *)
      MemorySize: 128
      Timeout: 100
  DailyBookEurope:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: rate(1 days)
      FlexibleTimeWindow:
        Mode: 'OFF'
      ScheduleExpressionTimezone: Europe/Helsinki
      Target:
        Arn: !GetAtt NatibleFunction.Arn
        RoleArn: !GetAtt WeeklyDigestToNatibleFunctionRole.Arn
  DailyBookUTC:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: rate(1 days)
      FlexibleTimeWindow:
        Mode: 'OFF'
      ScheduleExpressionTimezone: UTC
      Target:
        Arn: !GetAtt NatibleFunction.Arn
        RoleArn: !GetAtt WeeklyDigestToNatibleFunctionRole.Arn
  NatibleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: NatibleFunction
      CodeUri: src/Function
      Handler: index.handler
      Runtime: nodejs16.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
  NatibleFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${NatibleFunction}
  WeeklyDigestToNatibleFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub scheduler.${AWS::URLSuffix}
          Action: sts:AssumeRole
          Condition:
            ArnLike:
              aws:SourceArn: !Sub
                - arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/*/${AWS::StackName}-${ResourceId}-*
                - ResourceId: WeeklyDigest
      Policies:
        - PolicyName: StartExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt NatibleFunction.Arn
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES